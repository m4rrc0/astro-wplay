---
import { IO, Img, ImgDirectus, SEO } from '@components'
import placeholderWPlayCircleBlue from '@images/WannaPlay-button-circle-blue.png'
import { BasicPage, SkeletonPage } from '@layouts'
import { imageDirectusSrc } from '@utils'
import citiesUnordered from '@utils/areas/cities.json'
import { Icon } from 'astro-icon/components'

const { lang, events: eventsUnfiltered, dictionary: eventTypes } = Astro.props
const events = eventsUnfiltered?.filter(e => !e.isCanonical)

const cities = [...citiesUnordered].sort((a, b) =>
  a.code_name.localeCompare(b.code_name, lang.code)
)

const eventsCountPhrase = `${
  events.length === 1 ? `${events.length} événement` : `${events.length} événements`
} jeu`
const eventsTimeStart = events?.[0]?.time_start
const eventsTimeEnd =
  events.length < 2
    ? null
    : events?.[events.length - 1]?.time_end || events?.[events.length - 1]?.time_start
const eventsTimeArr = [
  eventsTimeStart &&
    `${eventsTimeStart?.[lang.code]?.day} ${
      eventsTimeStart?.[lang.code]?.monthLong
    } ${eventsTimeStart?.[lang.code]?.year}`,
  eventsTimeEnd &&
    `${eventsTimeEnd?.[lang.code]?.day} ${
      eventsTimeEnd?.[lang.code]?.monthLong
    } ${eventsTimeEnd?.[lang.code]?.year}`,
].filter(z => z)
const eventsPhrase =
  eventsTimeArr.length === 0
    ? `${eventsCountPhrase} `
    : eventsTimeArr.length === 1 || eventsTimeArr?.[0] == eventsTimeArr?.[1]
      ? `${eventsCountPhrase} le ${eventsTimeArr[0]}`
      : `${eventsCountPhrase} entre le ${eventsTimeArr.join(' et le ')}`

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const cssRulesDisplayByType =
  `#event-form-filter-wrapper:has(input:checked) ~ div .card-event{display:none;}` +
  (eventTypes || [])
    .map(({ code_name }) => {
      return `#event-form-filter-wrapper:has(input[data-code='${code_name}']:checked) ~ div .card-event[data-type-${code_name}='true']:not(.hidden) { display: block; }`
    })
    .join('\n')
---

<SkeletonPage lang={lang.code}>
  <SEO
    slot="head"
    ogType="website"
    title={`Événements et soirées jeux de Belgique`}
    description={`Tu cherche une soirée jeux près de chez toi? Viens découvrir la liste d'événements ludiques la plus complète de Belgique sur Wanna Play.`}
    canonicalUrl={canonicalURL.href + '/'}
    socialImage="/assets/images/LOGO-1024px.png"
    ogVideo={false}
    twitterCard="summary"
  />
  <BasicPage {lang}>
    <main class="center width-max">
      <div id="events-list-container" class="box no-border stack gap-down-h1">
        <IO h1 $skip={!events?.[0]?.name} class="center text"
          >Événements et soirées jeux de Belgique</IO
        >

        <!-- <script src="@assets/js/events-filter.js"></script> -->
        <div id="event-form-filter-wrapper" class="center">
          <form
            id="eventsForm"
            class="stack horizontal justify-content-center gap-0"
            style="flex-wrap: wrap; gap: var(--size-h1)"
          >
            <div class="popover-wrapper">
              <button
                disabled
                data-remove-disabled
                popovertarget="proximity"
                id="proximityBtn"
                type="button"
                class="stack horizontal align-items-center gap-h8"
              >
                <span>A proximité de</span>
                <Icon
                  name="gridicons:chevron-down"
                  title="open ressources menu"
                  role="img"
                  style="flex-shrink: 0;"
                />
              </button>
              <div popover id="proximity" class="padding-h3 border-radius-m">
                <div class="stack gap-h3">
                  <div class="stack horizontal">
                    <Icon name="gridicons:location" title="location" role="img" />
                    <input
                      type="text"
                      name="position"
                      list="cityList"
                      placeholder="Rechercher une ville..."
                      autocomplete="off"
                    />
                    <datalist id="cityList">
                      <option value="Ma position" data-latitude="" data-longitude=""></option>
                      {
                        cities?.map(city => (
                          <option
                            value={
                              city.translations.find(t => t.lang === lang.code)?.value ||
                              city.translations?.[0]?.value ||
                              city.code_name
                            }
                            data-latitude={city.lat}
                            data-longitude={city.lng}
                          />
                        ))
                      }
                    </datalist>
                  </div>
                  <div class="distance stack justify-space-between">
                    <label for="distance">Distance (km)</label>
                    <div class="stack gap-0">
                      <input
                        type="range"
                        id="distance"
                        name="distance"
                        min="1"
                        max="99"
                        value="10"
                        list="distances"
                      />
                      <datalist
                        id="distances"
                        class="stack horizontal justify-space-between align-items-center h7 padding-x-h9"
                      >
                        <option value="1" label="01"></option>
                        <option value="25" label="25"></option>
                        <option value="50" label="50"></option>
                        <option value="75" label="75"></option>
                        <option value="99" label="99"></option>
                      </datalist>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="popover-wrapper">
              <button
                data-remove-disabled
                popovertarget="eventType"
                id="eventTypeBtn"
                class="max-width-col-5 stack horizontal align-items-center gap-h8"
                type="button"
              >
                <span class="text-overflow-ellipsis">Types</span>
                <Icon
                  name="gridicons:chevron-down"
                  title="open ressources menu"
                  role="img"
                  style="flex-shrink: 0;"
                />
              </button>
              <div popover id="eventType" class="padding-h3 border-radius-m align-items-start">
                <ul class="reset stack gap-h3" style="white-space: nowrap">
                  {
                    eventTypes?.map(d => {
                      return (
                        <li class="stack horizontal align-items-center">
                          <input
                            type="checkbox"
                            id={d.code_name}
                            value={d.code_name}
                            name="types"
                            data-code={d.code_name}
                            data-label={
                              d.translations.find(t => t.language_code === lang.code).default_label
                            }
                          />
                          <label for={d.code_name}>
                            {d.translations.find(t => t.language_code === lang.code).default_label}
                          </label>
                        </li>
                      )
                    })
                  }
                </ul>
              </div>
            </div>
            {
              /* <p>Trier par...</p>
            <div class="cluster" style="--gap: var(--size-h7);">
              <div>
                <button
                  class="sort asc"
                  data-sort="timestart"
                  data-default-order="asc"
                  >Début
                </button>
                <button class="sort" data-sort="zip">Code postal</button>
              </div>
            </div> */
            }
            <input type="reset" id="resetBtn" class="button color-palette-teal" value="Reset" />
          </form>
        </div>

        <IO p $skip={!events?.[0]?.name} id="eventsPhrase" class="center text">{eventsPhrase}</IO>

        <IO div $skipNoInner class="grid gap-down-h4" style="--width-column: var(--width-col-3);">
          <IO ul $skip={!events?.[0]?.name} class="list reset">
            {
              events?.map(event => {
                const {
                  name,
                  typesTranslated,
                  location,
                  cover_image,
                  organizers,
                  time_start,
                  time_end,
                  isSameDay,
                } = event

                const srcCover = imageDirectusSrc({
                  src: cover_image?.src,
                  width: '1000',
                  fit: 'cover',
                  quality: '50',
                })

                const currentTypes = typesTranslated?.map(t => t.code_name)
                const typeAttributes = currentTypes?.reduce(
                  (acc, type) => ({ ...acc, [`data-type-${type}`]: true }),
                  {}
                )

                const [lng, lat] = location?.geo?.coordinates || []

                return (
                  <li
                    class="card-event breakout-clickable box no-border no-padding border-radius-s"
                    style=""
                    data-types={currentTypes}
                    {...typeAttributes}
                    data-latitude={lat}
                    data-longitude={lng}
                  >
                    <div
                      class="box no-border padding-h4 with-sidebar gap-h4
                                        color-palette-trans
                                        background-overlay
                                        "
                      style={
                        (srcCover
                          ? `background-image: url("${srcCover}"); `
                          : `background-image: url("/assets/images/WannaPlay-banner-paper.jpeg");`) +
                        `--content-min: 80%;`
                      }
                    >
                      <div>
                        <time
                          datetime={time_start.dateTimeRaw}
                          class="timestart stack gap-down-h8 center intrinsic"
                          style="line-height: 1;"
                        >
                          <span class="size-h1">{time_start?.fr?.day}</span>
                          <span class="size-h2">{time_start?.fr?.monthShort}</span>
                          <span class="size-h2">{time_start?.fr?.year}</span>
                        </time>
                        <div>
                          <div class="cover no-gap" style="--min-height: 100%;">
                            <h2 class="h3 centered">
                              <a
                                href={`/${event.path}/`}
                                class="name reset clickable"
                                set:html={name}
                              />
                            </h2>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="card-event-footer box no-border padding-h8 stack horizontal split-after-1">
                      {/* TODO: repair geting location from organization */}
                      <IO
                        p
                        $skipNoInner
                        class="zip city h5"
                        data-zip={location.postalCode}
                        data-city={location.addressLocality}
                        data-latitude={location.geo?.coordinates[1]}
                        data-longitude={location.geo?.coordinates[0]}
                      >
                        {location.addressLocality}
                      </IO>
                      <ul class="reset stack horizontal">
                        {organizers?.map(({ name, logo }) => (
                          <li>
                            {logo?.src ? (
                              <ImgDirectus
                                image={logo}
                                src={logo?.src}
                                alt={name}
                                loading="lazy"
                                class=""
                                style="width: 2rem; max-height: 2rem; max-width: 100%; height: auto;"
                                width="32"
                                height="32"
                                fit="inside"
                                quality="99"
                              />
                            ) : (
                              <Img
                                src={placeholderWPlayCircleBlue}
                                alt="logo"
                                loading="lazy"
                                class=""
                                style="width: 2rem; max-height: 2rem; max-width: 100%; height: auto;"
                                width="32"
                                height="32"
                              />
                            )}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </li>
                )
              })
            }
          </IO>
        </IO>
      </div>
    </main>
  </BasicPage>
  {
    /* <Fragment slot="head-bottom">
    {
      eventTypes.map(({ code_name }) => {
        const rule = `<style type="text/css">#event-form-filter-wrapper:has(input[data-code='${code_name}']:checked) ~ div .card-event[data-type-${code_name}='true'] { display: block !important; }</style>`
        return <Fragment set:html={rule} />
      })
    }
  </Fragment> */
  }
</SkeletonPage>

<style>
  .card-event-footer {
    line-height: 32px;
  }
  .sort.asc::after {
    content: '\002B06';
    padding-left: 3px;
  }
  .sort.desc::after {
    content: '\002B07';
    padding-left: 3px;
  }
  [popover]#proximity:has(input[name='position']:placeholder-shown)
    > div
    > div:has(input[type='range']) {
    /* opacity: 0.5; */
    display: none;
  }
  [popovertarget='eventType'] {
    anchor-name: --event-type-anchor;
  }
  [popovertarget='proximity'] {
    anchor-name: --proximity-anchor;
  }
  [popover] {
    position: absolute;
  }
  [popover]::backdrop {
    background-color: rgb(255, 255, 255, 0.5);
    backdrop-filter: blur(2px);
  }
  @supports (anchor-name: --anchor) {
    [popover] {
      position: absolute;
      margin: 0;
      margin-block-start: 0.25rem;
      position-try-fallbacks: flip-inline;
      &#eventType {
        position-anchor: --event-type-anchor;
        position-area: bottom span-right;
      }
      &#proximity {
        position-anchor: --proximity-anchor;
        position-area: bottom span-left;
      }
    }
  }

  /* #event-form-filter-wrapper:has(input[data-code='gameTime']:checked)
    ~ div
    .card-event[data-type-gameTime='true'] {
    display: block !important;
  } */
</style>

<style type="text/css" set:html={cssRulesDisplayByType}></style>

<script>
  import {
    eventsFiltersStore,
    updateFilter,
    updateTypes,
    clearCity,
    resetFilters,
    getInitialState,
  } from '@stores/events-filters'

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#eventsForm')
    const cityInput = document.querySelector('input[name="position"]')
    const distanceInput = document.querySelector('input[name="distance"]')
    const typeInputs = document.querySelectorAll('input[name="types"]')
    const resetButton = document.querySelector('#resetBtn')

    const proximityBtnspan = document.querySelector('#proximityBtn span')
    const eventTypeBtnSpan = document.querySelector('#eventTypeBtn span.text-overflow-ellipsis')

    const initialState = getInitialState()
    cityInput.value = initialState.city
    distanceInput.value = initialState.distance
    typeInputs.forEach(input => {
      input.checked = initialState.types.includes(input.getAttribute('data-code'))
    })

    function updateButtonTexts(state) {
      proximityBtnspan.textContent = state.city || 'A proximité de'

      const checkedTypes = Array.from(typeInputs).filter(input => input.checked)
      if (checkedTypes.length === 0) {
        eventTypeBtnSpan.textContent = 'Types'
      } else if (checkedTypes.length === 1) {
        eventTypeBtnSpan.textContent = checkedTypes[0].getAttribute('data-label')
      } else {
        eventTypeBtnSpan.textContent = `Types (${checkedTypes.length})`
      }
    }

    function getCenterAndRadius(state) {
      const selectedCity = state.city
      const cityOption = document.querySelector(`option[value="${selectedCity}"]`)
      const centerLat = parseFloat(cityOption?.dataset.latitude)
      const centerLng = parseFloat(cityOption?.dataset.longitude)
      const radius = parseFloat(state.distance) // Radius in km
      return { centerLat, centerLng, radius }
    }

    function haversine(lat1, lng1, lat2, lng2) {
      const R = 6371 // Earth's radius in km
      const toRad = deg => (deg * Math.PI) / 180

      const dLat = toRad(lat2 - lat1)
      const dLng = toRad(lng2 - lng1)

      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2)

      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
      return R * c
    }

    function filterEvents(state) {
      if (!state.city) {
        document.querySelectorAll('.card-event').forEach(event => {
          event.classList.remove('hidden')
        })
        return
      }

      const { centerLat, centerLng, radius } = getCenterAndRadius(state)

      if (isNaN(centerLat) || isNaN(centerLng)) {
        console.warn('Center coordinates are not selected.')
        document.querySelectorAll('.card-event').forEach(event => {
          event.classList.remove('hidden')
        })
        return
      }

      document.querySelectorAll('.card-event').forEach(event => {
        const eventLat = parseFloat(event.dataset.latitude)
        const eventLng = parseFloat(event.dataset.longitude)

        const distance = haversine(centerLat, centerLng, eventLat, eventLng)
        if (distance > radius) {
          event.classList.add('hidden')
        } else {
          event.classList.remove('hidden')
        }
      })
    }

    eventsFiltersStore.listen(state => {
      updateButtonTexts(state)
      filterEvents(state)
    })

    cityInput.addEventListener('input', e => {
      if (!e.target.value.trim()) {
        clearCity()
      } else {
        updateFilter('city', e.target.value)
      }
    })

    distanceInput.addEventListener('input', e => {
      updateFilter('distance', e.target.value)
    })

    typeInputs.forEach(input => {
      input.addEventListener('change', () => {
        const checkedTypes = Array.from(typeInputs)
          .filter(input => input.checked)
          .map(input => input.getAttribute('data-code'))
        updateTypes(checkedTypes)
      })
    })

    resetButton.addEventListener('click', () => {
      setTimeout(() => {
        resetFilters()
      }, 0)
    })

    form.addEventListener('submit', e => {
      e.preventDefault()
    })
  })
</script>
