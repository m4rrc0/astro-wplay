---
import Debug from 'astro/debug';
import { Markdown } from 'astro/components';
import { Icon } from 'astro-icon'
import { SkeletonPage, BasicPage } from '@layouts'

const {lang, organization: {
      // status,
      // date_updated,
      name,
      // slug,
      // types,
      typesTranslated,
      logo,
      cover_image,
      // opening_hours,
      opening_hours_strings,
      // games_services,
      games_services_translated,
      address,
      // amenities,
      amenities_translated,
      website,
      facebook_page,
      instagram,
      twitter,
      youtube_channel,
      translations,
      // opening_hours_remark,
      // description,
      // gallery,
      links
}} = Astro.props;

const { description, opening_hours_remark } = translations?.find(({ languages_code }) => languages_code === lang.code) || {}

---

<!-- <Debug {name} /> -->
<SkeletonPage lang={lang.code}>
  <BasicPage {lang}>
    <!-- <div class="stack gap-down-h1"> -->
    <main class="center max">
      <header>
        <div
          class="center text box no-border
            color-palette-trans
            h1 padding-y-relative-xl
            background-overlay
            "
          style={cover_image?.src ? `background-image: url("${cover_image.src}");` : ''}>
          <h1 class="centered" set:html={name} />
          {typesTranslated?.[0] && address?.city && address?.area?.name?.fr &&
            <p class="h3">
              {typesTranslated?.map(({ [lang.code]: typeTranslated }) => typeTranslated).join(', ')} Ã  {address.city} dans la province de {address?.area?.name?.fr}
            </p>
          }
          {
            address?.string && (
              <p class="h6">
                <a href={address.gMapLink} target="_blank" rel="noopener noreferrer">{address.string}</a>
              </p>)
          }

        </div>
        <div
          class="center intrinsic box no-border
            color-palette-main
            width-col-6
            border-radius-s
            "
          style="
            margin-top: calc(var(--size-h2) * -1);
            margin-bottom: var(--size-h2);
            box-shadow: 0 0px 6px rgb(0 0 0 / 30%);
            max-height: var(--width-col-6);
            overflow: hidden;
            ">

          {logo?.src && <img src={logo.src} class="" style="max-width: 100%; max-height: inherit;" />}
        </div>
      </header>

      {(games_services_translated?.[0] || amenities_translated?.[0]) &&
        <div class="box no-border cluster padding-h6 gap-down-h6 center max-width-measure-h4">
          <ul class="reset">
            <>
              {games_services_translated?.map(({ [lang.code]: code }) => (
                <li class="
                  box no-border padding-x-h7 padding-y-h8
                  color-palette-variation-contrast
                  border-radius-s
                ">{code}</li>
              ))}

              {amenities_translated?.map(({ [lang.code]: code }) => (
                <li class="
                  box no-border padding-x-h7 padding-y-h8
                  color-palette-variation-funky-contrast
                  border-radius-s
                ">{code}</li>
              ))}
            </>
          </ul>
        </div>
      }

      {(opening_hours_strings?.[0] || opening_hours_remark) && <div class="
        box no-border
        color-palette-variation-funky-contrast
      ">
        <div class="center max-width-measure-h4">
          <h2>Horaires</h2>
          {
            opening_hours_strings?.[0] && (
              <div>
                  {opening_hours_strings.map(str => (
                    <p set:html={str} />
                  ))}
              </div>
            )
          }
          {
            opening_hours_remark && (
              <div>
                  <Markdown content={opening_hours_remark} />
              </div>
            )
          }
        </div>
      </div>}
      <!-- {amenities_translated?.[0] && <div class="box no-border cluster gap-h6">
        <ul class="reset">
            {amenities_translated?.map(({ [lang.code]: code }) => (
              <li>{code}</li>
            ))}
        </ul>
      </div>} -->
      {description && <div class="
        box no-border center
        max-width-measure-h4
      ">
          <h2>Description</h2>
          <Markdown content={description} />
      </div>}

      {links?.[0] && (
        <div class="box no-border cluster center max-width-measure-h4">
          <ul class="reset justify-content-space-around">
            {links.map(({name, url, iconName}) => (
              <li>
                <a href={url} target="_blank" rel="noopener noreferrer" class="
                  box no-border stack center intrinsic gap-down-h8
                ">
                  <Icon name={iconName} size="1em" class="size-h1" />
                  <div class="size-h4">{name.fr}</div>
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </main>

    <!-- </div> -->
  </BasicPage>
</SkeletonPage>