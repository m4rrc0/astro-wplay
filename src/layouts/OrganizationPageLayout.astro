---
import Debug from 'astro/debug';
import { Markdown } from 'astro/components';

const {languages_code, organization: {
      // status,
      // date_updated,
      name,
      // slug,
      // types,
      typesTranslated,
      logo,
      cover_image,
      // opening_hours,
      opening_hours_strings,
      // games_services,
      games_services_translated,
      address,
      // amenities,
      amenities_translated,
      website,
      facebook_page,
      instagram,
      twitter,
      youtube_channel,
      translations,
      // opening_hours_remark,
      // description,
      // gallery,
      links
}} = Astro.props;

const { description, opening_hours_remark } = translations?.find(t => t.languages_code === languages_code) || {}

---

<!-- <Debug {name} /> -->

<header>
  <div
    class="center text box no-border
      color-palette-trans
      h1 padding-y-relative-xl
      background-overlay
      "
    style={cover_image?.src ? `background-image: url("${cover_image.src}");` : ''}>
    <h1 class="centered" set:html={name} />
    {typesTranslated?.[0] && address?.city && address?.area?.name?.fr &&
      <p class="h3">
        {typesTranslated?.map(({ [languages_code]: typeTranslated }) => typeTranslated).join(', ')} Ã  {address.city} dans la province de {address?.area?.name?.fr}
      </p>
    }
    {
      address?.string && (
        <p class="h6">
          <a href={address.gMapLink} target="_blank" rel="noopener noreferrer">{address.string}</a>
        </p>)
    }

  </div>
  <div
    class="center intrinsic box no-border
      color-palette-main
      width-col-6
      border-radius-s
      "
    style="
      margin-top: calc(var(--size-h2) * -1);
      box-shadow: 0 0px 6px rgb(0 0 0 / 30%);
      max-height: var(--width-col-6);
      overflow: hidden;
      ">

    {logo?.src && <img src={logo.src} class="" style="max-width: 100%; max-height: inherit;" />}
  </div>
</header>

{links && links?.[0] && <ul>
  {links.map(({name, url}) => (
    <li><a href={url} target="_blank" rel="noopener noreferrer">{name.fr}</a></li>
  ))}
</ul>}

{(opening_hours_strings?.[0] || opening_hours_remark) && <div class="
  box no-border
  color-palette-variation-funky-contrast
">
    <h2>Horaires</h2>
    {
      opening_hours_strings?.[0] && (
        <div>
            {opening_hours_strings.map(str => (
                <p set:html={str} />
            ))}
        </div>
      )
    }
    {
      opening_hours_remark && (
        <div>
            <Markdown content={opening_hours_remark} />
        </div>
      )
    }
</div>}
{(games_services_translated?.[0] || amenities_translated?.[0]) &&
  <div class="box no-border cluster padding-h6 gap-h6">
    <ul class="reset">
      <>
        {games_services_translated?.map(({ [languages_code]: code }) => (
          <li class="
            box no-border padding-x-h7 padding-y-h8
            color-palette-variation-contrast
            border-radius-s
          ">{code}</li>
        ))}

        {amenities_translated?.map(({ [languages_code]: code }) => (
          <li class="
            box no-border padding-x-h7 padding-y-h8
            color-palette-variation-funky-contrast
            border-radius-s
          ">{code}</li>
        ))}
      </>
    </ul>
  </div>
}
<!-- {amenities_translated?.[0] && <div class="box no-border cluster gap-h6">
  <ul class="reset">
      {amenities_translated?.map(({ [languages_code]: code }) => (
        <li>{code}</li>
      ))}
  </ul>
</div>} -->
{description && <div class="
  box no-border
">
    <h2>Description</h2>
    <Markdown content={description} />
</div>}