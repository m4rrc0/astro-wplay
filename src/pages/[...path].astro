---
// import Debug from 'astro/debug';
import {
  AdminHidden,
  AreaPage,
  AreasPage,
  ArticlePage,
  ArticlesPage,
  EventPage,
  EventsPage,
  HomePage,
  OrganizationPage,
  OrganizationsPage,
  ServicesPage,
  ServicePage,
} from '@layouts'
import { createPath, slugify } from '@utils'
import { areas as areasData } from '../store/transforms/utils.js'
import {
  // areas as areasData,
  fetchArticles,
  // fetchEvents as directusFetchEvents,
  fetchLanguages,
  fetchDictionary,
  start as startDirectus,
} from '../services/directus.js'
import { getEvents, getOrganizations } from '../store/dataService.js'
import { extractCanonicalEvents } from '../store/transforms/flatten.js'
import { seedData } from '../store/seed.js'
import { PAGE_ADMIN } from '../utils/env.js'

export async function getStaticPaths() {
  await startDirectus()
  await seedData()

  const languages = await fetchLanguages()
  const dictionary = await fetchDictionary()
  const organizations = await getOrganizations()
  const gamesRelatedServices = dictionary?.filter(d =>
    d.tag_categories?.some(category => category === 'games_related_service')
  )
  const paidPartners = organizations?.filter(o =>
    o.admin_categories?.some(category => category === 'paid_partner')
  )
  // Using our new data service for events
  const today = new Date()
  // const oneDayAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1, today.getHours(), today.getMinutes(), today.getSeconds())
  // const inSixMonths = new Date(today.getFullYear(), today.getMonth() + 6, today.getDate(), today.getHours(), today.getMinutes(), today.getSeconds())

  const events = await getEvents({
    flatten: true,
    after: today,
  })
  const canonicalEvents = extractCanonicalEvents(events)

  const articles = await fetchArticles()

  let staticPaths = [
    ...(PAGE_ADMIN
      ? [
          {
            params: { path: PAGE_ADMIN },
            props: { lang: { code: 'fr' }, events },
          },
        ]
      : []),
  ]

  // TODO: account for multiple languages! (lang is hardcoded to 'fr' for the moment)
  languages.forEach(lang => {
    if (lang.code !== 'fr') return null

    const organizationsStaticPaths = organizations.map(organization => {
      return {
        params: { path: organization.path },
        props: { lang, organization },
      }
    })
    const gamesRelatedServicesStaticPaths = gamesRelatedServices.map(service => {
      const path = createPath({ type: 'service', slug: slugify(service.code_name) })
      return {
        params: { path },
        props: {
          lang,
          service,
          services: gamesRelatedServices,
          dictionary,
          areas: areasData,
          // organizations: paidPartners,
          organizations: paidPartners.filter(o => {
            return o.games_related_services?.some(
              service2 => service2.service.code_name === service.code_name
            )
          }),
        },
      }
    })
    const eventsStaticPaths = [...events, ...canonicalEvents].map(event => {
      return { params: { path: event.path }, props: { lang, event } }
    })
    const articlesStaticPaths = articles.map(article => {
      return { params: { path: article.path }, props: { lang, article } }
    })
    const areasStaticPaths = areasData.map(area => {
      const currentOrgs = organizations.filter(
        i => i?.location?.area.code_name === area.code_name && i?.boardgame_related
      )
      const currentEvents = events.filter(i => i?.location?.area.code_name === area.code_name)
      return {
        params: { path: area.path[lang.code] },
        props: {
          lang,
          area,
          organizations: currentOrgs,
          events: currentEvents,
        },
      }
    })
    const listsStaticPaths = [
      {
        params: { path: createPath({ type: 'home' }) },
        props: { lang, areas: areasData, articles, events },
      },
      {
        params: { path: createPath({ type: 'organizations' }) },
        props: {
          lang,
          organizations: organizations?.filter(o => o.boardgame_related),
          areas: areasData,
          dictionary: dictionary?.sort((d1, d2) =>
            d1.translations
              .find(t => t.language_code === lang.code)
              .default_label.localeCompare(
                d2.translations.find(t => t.language_code === lang.code).default_label
              )
          ),
        },
      },
      {
        params: { path: createPath({ type: 'services' }) },
        props: {
          lang,
          organizations: paidPartners,
          areas: areasData,
          services: gamesRelatedServices,
          dictionary: dictionary?.sort((d1, d2) =>
            d1.translations
              .find(t => t.language_code === lang.code)
              .default_label.localeCompare(
                d2.translations.find(t => t.language_code === lang.code).default_label
              )
          ),
        },
      },
      {
        params: { path: createPath({ type: 'events' }) },
        props: {
          lang,
          events,
          dictionary: dictionary
            ?.filter(d => d.tag_categories.includes('event_type'))
            .sort((d1, d2) =>
              d1.translations
                .find(t => t.language_code === lang.code)
                .default_label.localeCompare(
                  d2.translations.find(t => t.language_code === lang.code).default_label
                )
            ),
        },
      },
      {
        params: { path: createPath({ type: 'articles' }) },
        props: { lang, articles },
      },
      {
        params: { path: createPath({ type: 'areas' }) },
        props: { lang, areas: areasData },
      },
    ]

    staticPaths = [
      ...staticPaths,
      ...organizationsStaticPaths,
      ...gamesRelatedServicesStaticPaths,
      ...eventsStaticPaths,
      ...articlesStaticPaths,
      ...areasStaticPaths,
      ...listsStaticPaths,
    ]
  })

  return staticPaths
}

const { path } = Astro.params
const {
  lang,
  dictionary,
  organization,
  organizations,
  service,
  services,
  event,
  events,
  article,
  articles,
  area,
  areas,
} = Astro.props
---

<Fragment>
  <!-- LISTS PAGES -->
  {PAGE_ADMIN && path === PAGE_ADMIN && <AdminHidden {lang} {events} />}
  {path === createPath({ type: 'home' }) && <HomePage {areas} {articles} {lang} {events} />}
  {path === createPath({ type: 'articles' }) && <ArticlesPage {articles} {lang} />}
  {path === createPath({ type: 'areas' }) && <AreasPage {areas} {lang} />}
  {path === createPath({ type: 'events' }) && <EventsPage {events} {lang} {dictionary} />}
  {
    path === createPath({ type: 'organizations' }) && (
      <OrganizationsPage {organizations} {lang} {areas} {dictionary} />
    )
  }
  {
    path === createPath({ type: 'services' }) && (
      <ServicesPage {organizations} {lang} {areas} {services} {dictionary} />
    )
  }
  <!-- ITEMS PAGES -->
  {organization && <OrganizationPage {organization} {lang} />}
  {service && <ServicePage {organizations} {service} {lang} {areas} {services} {dictionary} />}
  {event && <EventPage {event} {lang} />}
  {article && <ArticlePage {article} {lang} />}
  {area && <AreaPage {area} {lang} {events} {organizations} />}
  <!-- <Debug {article} /> -->
</Fragment>
