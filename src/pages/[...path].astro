---
// import Debug from 'astro/debug';
import { createPath } from "@utils"
import {
  directus,
  start as startDirectus,
  fetchLanguages,
  fetchOrganizations,
  fetchEvents,
  fetchArticles,
  areas,
} from "../services/directus.js"
import {
  SkeletonPage,
  BasicPage,
  AdminHidden,
  HomePage,
  OrganizationPage,
  EventPage,
  ArticlesPage,
  ArticlePage,
  AreasPage,
  AreaPage,
} from "@layouts"

const PAGE_ADMIN = import.meta.env.PAGE_ADMIN || null

export async function getStaticPaths() {
  await startDirectus()

  const PAGE_ADMIN = import.meta.env.PAGE_ADMIN || null

  // const pages = await fetchPages()
  const languages = await fetchLanguages()
  const organizations = await fetchOrganizations()
  const events = await fetchEvents()
  const articles = await fetchArticles()

  let staticPaths = [
    ...(PAGE_ADMIN
      ? [
          {
            params: { path: PAGE_ADMIN },
            props: { lang: { code: "fr" }, events },
          },
        ]
      : []),
  ]

  // TODO: account for multiple languages! (lang is hardcoded to 'fr' for the moment)
  languages.forEach((lang) => {
    if (lang.code !== "fr") return null
    // const pagesStaticPaths = await pages.data.map(page => {
    //   // const path = page.path === 'index' ? undefined : page.path
    //   return { params: { path }, props: { page, pages } }
    // })
    const organizationsStaticPaths = organizations.map((organization) => {
      return {
        params: { path: organization.path },
        props: { lang, organization },
      }
    })
    const eventsStaticPaths = events.map((event) => {
      return { params: { path: event.path }, props: { lang, event } }
    })
    const articlesStaticPaths = articles.map((article) => {
      return { params: { path: article.path }, props: { lang, article } }
    })
    const areasStaticPaths = areas.map((area) => {
      const currentOrgs = organizations.filter(
        (i) => i?.address?.area.code_name === area.code_name,
      )
      const currentEvents = events.filter(
        (i) => i?.address?.area.code_name === area.code_name,
      )
      return {
        params: { path: area.path[lang.code] },
        props: {
          lang,
          area,
          organizations: currentOrgs,
          events: currentEvents,
        },
      }
    })
    const listsStaticPaths = [
      {
        params: { path: createPath({ type: "home" }) },
        props: { lang, areas, articles },
      },
      // { params: { path: 'fr/o' }, props: { lang, organizations } },
      // { params: { path: 'fr/e' }, props: { lang, events } },
      {
        params: { path: createPath({ type: "articles" }) },
        props: { lang, articles },
      },
      {
        params: { path: createPath({ type: "areas" }) },
        props: { lang, areas },
      },
    ]

    staticPaths = [
      ...staticPaths,
      // ...pagesStaticPaths,
      ...organizationsStaticPaths,
      ...eventsStaticPaths,
      ...articlesStaticPaths,
      ...areasStaticPaths,
      ...listsStaticPaths,
    ]
  })

  return staticPaths
}

const { path } = Astro.params
const {
  lang,
  organization,
  organizations,
  event,
  events,
  article,
  articles,
  area,
  areas,
} = Astro.props
---

<Fragment>
  <!-- {path === 'fr/o' && (
    <div>
      <h2>Organisations</h2>
      <ul>
        {organizations.map(o => (
          <li><a href={`/${o.path}`}>{o.name}</a></li>
        ))}
      </ul>
    </div>
  )}
    {
      path === 'fr/e' && (
        <div>
          <h2>Events</h2>
          <ul>
            {
              events.map(e => (
                <li><a href={`/${e.path}`}>{e.name}</a></li>
                ))
            }
          </ul>
        </div>
        )
      } -->
  <!-- LISTS PAGES -->
  {PAGE_ADMIN && path === PAGE_ADMIN && <AdminHidden {lang} {events} />}
  {
    path === createPath({ type: "home" }) && (
      <HomePage {areas} {articles} {lang} />
    )
  }
  {
    path === createPath({ type: "articles" }) && (
      <ArticlesPage {articles} {lang} />
    )
  }
  {path === createPath({ type: "areas" }) && <AreasPage {areas} {lang} />}
  <!-- ITEMS PAGES -->
  {organization && <OrganizationPage {organization} {lang} />}
  {event && <EventPage {event} {lang} />}
  {article && <ArticlePage {article} {lang} />}
  {area && <AreaPage {area} {lang} {events} {organizations} />}
  <!-- <Debug {article} /> -->
</Fragment>
