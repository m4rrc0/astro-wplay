/* 1. ------------------------------------
set global vars on :root */
/*
measure = intrinsic widths sizes
s... = unitless scale values determined by size-scale-ratio
-> can also be computed with a max and min size and steps between
size-lock... = used for computing css locks for every size we need
*/
:root {
  --s-14: calc(var(--s-13) / var(--size-scale-ratio));
  --s-13: calc(var(--s-12) / var(--size-scale-ratio));
  --s-12: calc(var(--s-11) / var(--size-scale-ratio));
  --s-11: calc(var(--s-10) / var(--size-scale-ratio));
  --s-10: calc(var(--s-9) / var(--size-scale-ratio));
  --s-9: calc(var(--s-8) / var(--size-scale-ratio));
  --s-8: calc(var(--s-7) / var(--size-scale-ratio));
  --s-7: calc(var(--s-6) / var(--size-scale-ratio));
  --s-6: calc(var(--s-5) / var(--size-scale-ratio));
  --s-5: calc(var(--s-4) / var(--size-scale-ratio));
  --s-4: calc(var(--s-3) / var(--size-scale-ratio));
  --s-3: calc(var(--s-2) / var(--size-scale-ratio));
  --s-2: calc(var(--s-1) / var(--size-scale-ratio));
  --s-1: var(--s0);
  --s0: var(--size-base);
  --s1: var(--s0);
  --s2: calc(var(--s1) * var(--size-scale-ratio));
  --s3: calc(var(--s2) * var(--size-scale-ratio));
  --s4: calc(var(--s3) * var(--size-scale-ratio));
  --s5: calc(var(--s4) * var(--size-scale-ratio));
  --s6: calc(var(--s5) * var(--size-scale-ratio));
  --s7: calc(var(--s6) * var(--size-scale-ratio));
  --s8: calc(var(--s7) * var(--size-scale-ratio));
  --s9: calc(var(--s8) * var(--size-scale-ratio));
  --s10: calc(var(--s9) * var(--size-scale-ratio));
  --s11: calc(var(--s10) * var(--size-scale-ratio));
  --s12: calc(var(--s11) * var(--size-scale-ratio));
}

/* 2. ------------------------------------
We will work by context. Whatever the context we are in, we need to compute the css locks for every size on the common scale */
/*
the lock is the fluid value
the size-... is the fluid value bound within a min and max IF the browser supports min/max css functions ELSE it will just be the fluid value
*/

body,
*[class*="size-context-"] {
  /* ARCHIVE: Lock formula */
  /* --lock-h0: calc(
    (var(--size-h0-min) * 1rem) +
    (var(--size-h0-max) - var(--size-h0-min)) *
    (100vw - (var(--size-lock-screen-min) * 1rem)) /
    (var(--size-lock-screen-max) - var(--size-lock-screen-min))
  );
  --lock-h1: ...
  --lock-h2: ... */
  @mixin locks h0, h1, h2, h3, h4, p, h5, h6, h7, h8, h9;
  /* Can also use function */
  /* --lock-h1: lock(var(--size-h1-min),var(--size-h1-max),var(--size-lock-screen-min),var(--size-lock-screen-max)); */

  /* --size-font: var(--lock); */
  --size-h0: var(--lock-h0);
  --size-h1: var(--lock-h1);
  --size-h2: var(--lock-h2);
  --size-h3: var(--lock-h3);
  --size-h4: var(--lock-h4);
  --size-p: var(--lock-p);
  --size-h5: var(--lock-h5);
  --size-h6: var(--lock-h6);
  --size-h7: var(--lock-h7);
  --size-h8: var(--lock-h8);
  --size-h9: var(--lock-h9);

  /* NOTE: Have to use @support because for some reason firefox is not skipping the rule even though it does not know min(max()) */
  @supports (font-size: min(max(16px, 2.2vw), 22px)) {
    /* ARCHIVE: Clamp lacks browser support */
    /* --size-h0: clamp((var(--size-h0-min) * 1rem), var(--lock-h0), (var(--size-h0-max) * 1rem)); */
    /* https://caniuse.com/#feat=css-math-functions */
    /* See https://css-tricks.com/simplified-fluid-typography/ */

    /* Combination with the formula to avoid media queries */
    /* prettier-ignore */
    --size-h0: min(max((var(--size-h0-min) * 1rem), var(--lock-h0)), (var(--size-h0-max) * 1rem)); /* prettier-ignore */
    --size-h1: min(max((var(--size-h1-min) * 1rem), var(--lock-h1)), (var(--size-h1-max) * 1rem)); /* prettier-ignore */
    --size-h2: min(max((var(--size-h2-min) * 1rem), var(--lock-h2)), (var(--size-h2-max) * 1rem)); /* prettier-ignore */
    --size-h3: min(max((var(--size-h3-min) * 1rem), var(--lock-h3)), (var(--size-h3-max) * 1rem)); /* prettier-ignore */
    --size-h4: min(max((var(--size-h4-min) * 1rem), var(--lock-h4)), (var(--size-h4-max) * 1rem)); /* prettier-ignore */
    --size-p: min(max((var(--size-p-min) * 1rem), var(--lock-p)), (var(--size-p-max) * 1rem)); /* prettier-ignore */
    --size-h5: min(max((var(--size-h5-min) * 1rem), var(--lock-h5)), (var(--size-h5-max) * 1rem)); /* prettier-ignore */
    --size-h6: min(max((var(--size-h6-min) * 1rem), var(--lock-h6)), (var(--size-h6-max) * 1rem)); /* prettier-ignore */
    --size-h7: min(max((var(--size-h7-min) * 1rem), var(--lock-h7)), (var(--size-h7-max) * 1rem)); /* prettier-ignore */
    --size-h8: min(max((var(--size-h8-min) * 1rem), var(--lock-h8)), (var(--size-h8-max) * 1rem));
    --size-h9: min(
      max((var(--size-h9-min) * 1rem), var(--lock-h9)),
      (var(--size-h9-max) * 1rem)
    );
  }
  /* If no support for min(max()) we use media queries for more predictability */
  @supports not (font-size: min(max(16px, 2.2vw), 22px)) {
    @media (width > calc(env(--size-lock-screen-max) * 1rem)) {
      --size-h0: calc(var(--size-h0-max) * 1rem);
      --size-h1: calc(var(--size-h1-max) * 1rem);
      --size-h2: calc(var(--size-h2-max) * 1rem);
      --size-h3: calc(var(--size-h3-max) * 1rem);
      --size-h4: calc(var(--size-h4-max) * 1rem);
      --size-p: calc(var(--size-p-max) * 1rem);
      --size-h5: calc(var(--size-h5-max) * 1rem);
      --size-h6: calc(var(--size-h6-max) * 1rem);
      --size-h7: calc(var(--size-h7-max) * 1rem);
      --size-h8: calc(var(--size-h8-max) * 1rem);
      --size-h9: calc(var(--size-h9-max) * 1rem);
    }
    @media (width < calc(env(--size-lock-screen-min) * 1rem)) {
      --size-h0: calc(var(--size-h0-min) * 1rem);
      --size-h1: calc(var(--size-h1-min) * 1rem);
      --size-h2: calc(var(--size-h2-min) * 1rem);
      --size-h3: calc(var(--size-h3-min) * 1rem);
      --size-h4: calc(var(--size-h4-min) * 1rem);
      --size-p: calc(var(--size-p-min) * 1rem);
      --size-h5: calc(var(--size-h5-min) * 1rem);
      --size-h6: calc(var(--size-h6-min) * 1rem);
      --size-h7: calc(var(--size-h7-min) * 1rem);
      --size-h8: calc(var(--size-h8-min) * 1rem);
      --size-h9: calc(var(--size-h9-min) * 1rem);
    }
  }

  /* --lh-h0: calc(var(--size-h0) * 1.45);
  --lh-h1: calc(var(--size-h1) * 1.45);
  --lh-h2: calc(var(--size-h2) * 1.45);
  --lh-h3: calc(var(--size-h3) * 1.45);
  --lh-h4: calc(var(--size-h4) * 1.45);
  --lh-p: calc(var(--size-p) * 1.45);
  --lh-h5: calc(var(--size-h5) * 1.45);
  --lh-h6: calc(var(--size-h6) * 1.45);
  --lh-h7: calc(var(--size-h7) * 1.45);
  --lh-h8: calc(var(--size-h8) * 1.45);
  --lh-h9: calc(var(--size-h9) * 1.45);
   */
}

/* 3. ------------------------------------
  Default use of context values by assigning the appropriate sizes to reusable vars for margins, paddings, ... */
/* TODO: what vars do we need throughout the app? Isn't --size-h1 -> --size-h8 enough and more declarative? */
body,
*[class*="size-context-"] {
  /* should have multiple widths (max, measure, aside, min, 0, ?) */
  /* gap is for margins, paddings, grid-gap, ... */
  --gap-relative-s: 0.618em;
  --gap-relative-m: 1em;
  --gap-relative-l: 1.618em;
  --gap-relative: var(--gap-relative-m);

  --gap-xxs: var(--size-h7);
  --gap-xs: var(--size-h6);
  --gap-s: var(--size-h5);
  --gap-m: var(--size-h4);
  --gap-l: var(--size-h3);
  --gap-xl: var(--size-h2);
  --gap-xxl: var(--size-h1);

  --gap: var(--gap-m);
  /* useful vars for layout primitives */
  --gutters: var(--gap-m);
  --space: var(--gap-m);
  --padding: var(--gap-m);
  --width-border: var(--gap-xxs);
  --width-max: var(--gap-xxs);
  --width-min: var(--gap-xxs);
  --width-item: var(--gap-xxs);
  --width-side: var(--gap-xxs);
  --width-main-min: var(--gap-xxs);
  --height: var(--gap-xxs);
  --threshold: var(--gap-xxs);

  --measure: var(--measure-text);

  --size-border-button: var(--size-h8);
  /* --- Border widths --- */
  --size-border-0: 0;
  --size-border-s: 1px;
  --size-border-m: var(--size-h8);
  --size-border-l: var(--size-h6);
  /* default */
  --size-border: var(--size-border-m);

  /* --- outline ---
  (Used for :focus. Should probably be fixed for the whole site, whatever the context) */
  /* --size-outline: var(--size-h9); */
  --size-outline: calc(var(--s-14) * 1rem);

  /* --- Gutters ---
  = lateral paddings */
  --size-gutters-0: 0;
  --size-gutters-s: var(--size-h8);
  --size-gutters-m: var(--size-p);
  --size-gutters-l: var(--size-h3);
  /* default */
  --size-gutters: var(--size-gutters-m);

  /* --- main site's sections widths --- */
  /* --width-max: ; */
  /* --width-main: ; */
  /* --width-aside: ; */
  --width-text: var(--measure-text);
  --width-column: calc(var(--measure) / 4);
  /* --width-min: ; */ /* min block width */
}

/* 4. ------------------------------------
Specific contexts use specific values on the scale 
We will use "size contexts" to determine the mins and max to use for the computed locks */

.size-context-main,
body {
  /* Default sizing for title */
  --size-h0-max: var(--s9);
  --size-h0-min: var(--s6);
  --size-h1-max: var(--s6);
  --size-h1-min: var(--s4);
  --size-h2-max: var(--s4);
  --size-h2-min: var(--s2);
  --size-h3-max: var(--s2);
  --size-h3-min: var(--s1);
  --size-h4-max: var(--s1);
  --size-h4-min: var(--s0);
  --size-p-max: var(--s1);
  --size-p-min: var(--s0);
  --size-h5-max: var(--s0);
  --size-h5-min: var(--s-1);
  --size-h6-max: var(--s-1);
  --size-h6-min: var(--s-4);
  --size-h7-max: var(--s-4);
  --size-h7-min: var(--s-8);
  --size-h8-max: var(--s-8);
  --size-h8-min: var(--s-12);
  --size-h9-max: var(--s-12);
  --size-h9-min: var(--s-14);
}

.size-context-massive {
  /* Sizing for massive titles in sections */
  --size-h0-max: var(--s12);
  --size-h0-min: var(--s5);
  --size-h1-max: var(--s10);
  --size-h1-min: var(--s4);
  --size-h2-max: var(--s8);
  --size-h2-min: var(--s3);
  --size-h3-max: var(--s4);
  --size-h3-min: var(--s2);
  --size-h4-max: var(--s2);
  --size-h4-min: var(--s1);
  --size-p-max: var(--s2);
  --size-p-min: var(--s1);
  --size-h5-max: var(--s1);
  --size-h5-min: var(--s-2);
  --size-h6-max: var(--s-2);
  --size-h6-min: var(--s-3);
  --size-h7-max: var(--s-3);
  --size-h7-min: var(--s-4);
  --size-h8-max: var(--s-4);
  --size-h8-min: var(--s-5);
  --size-h9-max: var(--s-5);
  --size-h9-min: var(--s-6);

  /* We can also override the default use of certain variables */
  --size-outline: calc(var(--s-14) * 1rem); /* Used for :focus */
}

.size-context-aside {
  --gap-xl: var(--size-h5);
  --gap-s: var(--size-s2);
}

.size-context-miniature {
  --size-h0-max: var(--s-1);
  --size-h0-min: var(--s-2);
  --size-h1-max: var(--s-2);
  --size-h1-min: var(--s-3);
  --size-h2-max: var(--s-3);
  --size-h2-min: var(--s-4);
  --size-h3-max: var(--s-4);
  --size-h3-min: var(--s-5);
  --size-h4-max: var(--s-5);
  --size-h4-min: var(--s-6);
  --size-p-max: var(--s-5);
  --size-p-min: var(--s-6);
  --size-h5-max: var(--s-6);
  --size-h5-min: var(--s-7);
  --size-h6-max: var(--s-7);
  --size-h6-min: var(--s-8);
  --size-h7-max: var(--s-8);
  --size-h7-min: var(--s-8);
  --size-h8-max: var(--s-8);
  --size-h8-min: var(--s-8);
  --size-h9-max: var(--s-8);
  --size-h9-min: var(--s-8);
}

/* 5. ------------------------------------
utility classes to make it easier to apply font-sizes or other dimensions inside a size context */

/* prettier-ignore */
*, .size-h4, .h4, .size-p, .p { font-size: 1rem; font-size: var(--size-h4, 1rem);} /* prettier-ignore */
h1, h1 *, .size-h1, .h1 { font-size: 2rem; font-size: var(--size-h1, 2rem); } /* prettier-ignore */
h2, h2 *, .size-h2, .h2 { font-size: 1.8rem; font-size: var(--size-h2, 1.8rem); } /* prettier-ignore */
h3, h3 *, .size-h3, .h3 { font-size: 1.5rem; font-size: var(--size-h3, 1.5rem); } /* prettier-ignore */
h5, h5 *, .size-h5, .h5 { font-size: 0.8rem; font-size: var(--size-h5, 0.8rem); } /* prettier-ignore */
h6, h6 *, .size-h6, .h6 { font-size: 0.6rem; font-size: var(--size-h6, 0.6rem); } /* prettier-ignore */
.size-h7, .h7 { font-size: 0.4rem; font-size: var(--size-h7, 0.4rem); } /* prettier-ignore */
.size-h8, .h8 { font-size: 0.25rem; font-size: var(--size-h8, 0.25rem); } /* prettier-ignore */
.size-h9, .h9 { font-size: 0.1rem; font-size: var(--size-h9, 0.1rem); }
/* prettier-ignore */
button, .button { border-width: var(--size-border-button) }

/* --- BORDERS Sub-contexts --- */ /* prettier-ignore */
.size-border-0 { --size-border: 0; } /* prettier-ignore */
.size-border-s { --size-border: var(--size-border-s); } /* prettier-ignore */
.size-border-m { --size-border: var(--size-border-m); } /* prettier-ignore */
.size-border-l { --size-border: var(--size-border-l); } /* prettier-ignore */
/* --- GAP Sub-contexts --- */ /* prettier-ignore */
.gap-0, .gap-0-down > *, .gap-down-0 > *, .no-gap, .no-gap-down > *, .no-down-gap > * { --gap: 0; } /* prettier-ignore */
.gap-h0, .gap-h0-down > *, .gap-down-h0 > * { --gap: var(--size-h0); } /* prettier-ignore */
.gap-h1, .gap-h1-down > *, .gap-down-h1 > * { --gap: var(--size-h1); } /* prettier-ignore */
.gap-h2, .gap-h2-down > *, .gap-down-h2 > * { --gap: var(--size-h2); } /* prettier-ignore */
.gap-h3, .gap-h3-down > *, .gap-down-h3 > * { --gap: var(--size-h3); } /* prettier-ignore */
.gap-p, .gap-p-down > *, .gap-down-p > * { --gap: var(--size-p); } /* prettier-ignore */
.gap-h4, .gap-h4-down > *, .gap-down-h4 > * { --gap: var(--size-h4); } /* prettier-ignore */
.gap-h5, .gap-h5-down > *, .gap-down-h5 > * { --gap: var(--size-h5); } /* prettier-ignore */
.gap-h6, .gap-h6-down > *, .gap-down-h6 > * { --gap: var(--size-h6); } /* prettier-ignore */
.gap-h7, .gap-h7-down > *, .gap-down-h7 > * { --gap: var(--size-h7); } /* prettier-ignore */
.gap-h8, .gap-h8-down > *, .gap-down-h8 > * { --gap: var(--size-h8); } /* prettier-ignore */
.gap-h9, .gap-h9-down > *, .gap-down-h9 > * { --gap: var(--size-h9); }
/* useful if the gap on the current element is conflicting with a gap it should receive from a parent */ /* prettier-ignore */
.gap-down > * { --gap: var(--gap-down); } /* prettier-ignore */
/* Utility classes */ /* prettier-ignore */
.border-0, .no-border { border: none; } /* prettier-ignore */
.border-s { border: var(--size-border-s)} /* prettier-ignore */
.border-m { border: var(--size-border-m)} /* prettier-ignore */
.border-l { border: var(--size-border-l)} /* prettier-ignore */
